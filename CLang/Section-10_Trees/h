[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;67r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[67;1H"functions.c" [noeol] 205L, 3956B[1;1H[35m#include [m[31m"tree.h"[m
[34m/**
 * create_new_node - create a new node
 * @value: value to store inside the node
 * Return: the address of the new node or NULL if failed
 */[m
node *create_new_node([32mconst[m [32mint[m value)
{[9;9Hnode *new_node = malloc([38;5;130msizeof[m(node));[11;9H[38;5;130mif[m (new_node == [31mNULL[m)[12;17H[38;5;130mreturn[m ([31mNULL[m);[13;9Hnew_node->right = [31mNULL[m;[14;9Hnew_node->left = [31mNULL[m;[15;9Hnew_node->val = value;[17;9H[38;5;130mreturn[m (new_node);
}
[34m/**
 * insert_tree - insert in tree
 * @root: tree root
 * @value: value to store in the tree
 */[m
[32mbool[m insert_tree(node **root, [32mint[m value)
{[26;9Hnode *new_node = create_new_node(value);[27;9Hnode *current_node;[29;9H[38;5;130mif[m (!root || !new_node)[30;17H[38;5;130mreturn[m ([31mfalse[m);[31;9H[38;5;130mif[m (!(*root))[32;9H{[33;17H*root = new_node;[34;17H[38;5;130mreturn[m ([31mtrue[m);[35;9H}[36;9Hcurrent_node = *root;[37;9H[38;5;130mwhile[m ([31m1[m)[38;9H{[39;17H[38;5;130mif[m (new_node->val >= current_node->val)[40;17H{[41;25H[34m/*Right Side*/[m[42;25H[38;5;130mif[m (current_node->right == [31mNULL[m)[43;25H{[44;33Hcurrent_node->right = new_node;[45;33H[38;5;130mbreak[m;[46;25H}[47;25Hcurrent_node = current_node->right;[48;17H}[49;17H[38;5;130melse[m[50;17H{[51;25H[34m/*Left Side*/[m[52;25H[38;5;130mif[m (current_node->left == [31mNULL[m)[53;25H{[54;33Hcurrent_node->left = new_node;[55;33H[38;5;130mbreak[m;[56;25H}[57;25Hcurrent_node = current_node->left;[58;17H}[59;9H}[60;9H[38;5;130mreturn[m ([31mtrue[m);[61;9H}
[34m/**
 * look_up_tree - look for a specific value
 * @root: tree's root to search in
 * @value: the value to look for
 * Return: true if success otherwise false[m[67;261H1,1[11CTop[1;1H[?25h[?25l[67;251Hl[1;1H[67;251H [1;2H[67;263H2[1;2H[?25h[?25l[67;251Hs[1;2H[67;251H [1;2H[67;251Hcl[1;2H[67;251H  [1;2H[67;1H[1m-- INSERT --[m[67;13H[K[67;261H1,2[11CTop[1;1H#nclude [31m"tree.h"[m[1;17H[K[1;2H[?25h[?25l[2;66r[2;1H[L[1;67r[1;2H[K[2;1Hnclude [31m"tree.h"[m[67;261H[K[67;261H2,1[11CTop[2;1H[?25h[?25l[67;1H[K[67;261H2,1[11CTop[2;1H[?25h[?25l[67;1HType  :qa!  and press <Enter> to abandon all changes and exit Vim[67;261H[K[67;261H2,1[11CTop[2;1H[?25h[?25l[67;261H[K[67;261H2,1[11CTop[2;1H[?25h[?25l[67;261H[K[67;261H2,1[11CTop[2;1H[?25h[?25l[67;251H^D[2;1H[67;251H  [6;9H[1;66r[1;1H[33M[1;67r[6;9H[106m{[27;9H}[m[34;1H[34m * Return: true if success otherwise false
 */[m
[32mbool[m look_up_tree(node *root, [32mint[m value)
{[38;9H[32mbool[m found = [31mfalse[m;[40;9H[38;5;130mwhile[m (root)[41;9H{[42;17H[38;5;130mif[m (root->val <= value)[43;17H{[44;25H[34m/*Right side*/[m[45;25H[38;5;130mif[m (root->val == value)[46;25H{[47;33Hfound = [31mtrue[m;[48;33H[38;5;130mbreak[m;[49;25H}[50;25Hroot = root->right;[51;17H}[52;17H[38;5;130melse[m[53;17H{[54;25H[34m/*Left side*/[m[55;25H[38;5;130mif[m (root->val == value)[56;25H{[57;33Hfound = [31mtrue[m;[58;33H[38;5;130mbreak[m;[59;25H}[60;25Hroot = root->left;[61;17H}[62;9H}[63;9H[38;5;130mreturn[m (found);
}
[34m/**
 * remove_node[m[67;1H[K[67;261H39,2-9[8C23%[6;9H[?25h[?25l[67;251H^D[6;9H[67;251H  [6;1H[1;66r[1;1H[33M[1;67r[34;1H[34m * @root: tree's root
 * @value: value to remove from tree
 * Return: true if success otherwise false
*/[m
[32mbool[m remove_node(node **root, [32mint[m value)
{[40;9Hnode *current_node = [31mNULL[m;[41;9Hnode *parent_node = [31mNULL[m;[42;9Hnode *tmp = [31mNULL[m;[43;9H[32mbool[m leaf = [31mfalse[m;[44;9H[32mbool[m only_one_child = [31mfalse[m;[45;9H[32mbool[m two_childrens = [31mfalse[m;[47;10H[38;5;130mif[m (!root)[48;17H[38;5;130mreturn[m ([31mfalse[m);[49;9Hcurrent_node = *root;[50;9H[38;5;130mwhile[m (current_node)[51;9H{[52;17H[38;5;130mif[m (value > current_node->val)[53;17H{[54;25Hparent_node = current_node;[55;25Hcurrent_node = current_node->right;[56;25H[38;5;130mcontinue[m;[57;17H}[58;17H[38;5;130melse[m [38;5;130mif[m (value < current_node->val)[59;17H{[60;25Hparent_node = current_node;[61;25Hcurrent_node = current_node->left;[62;25H[38;5;130mcontinue[m;[63;17H}[64;17H[38;5;130melse[m [38;5;130mif[m (value == current_node->val)[65;17H{[66;25H[34m/*All possiblities*/[m[67;261H[K[67;261H72,0-1[8C47%[6;1H[?25h[?25l[67;251H^D[6;1H[67;251H  [6;1H[1;66r[1;1H[33M[1;67r[34;25Hleaf = current_node->right == [31mNULL[m && current_node->left == [31mNULL[m;[35;25Honly_one_child = current_node->right != [31mNULL[m && current_node->left == [31mNULL[m || current_node->right == [31mNULL[m && current_node->left != [31mNULL[m;[36;25Htwo_childrens = current_node->right != [31mNULL[m && current_node->left != [31mNULL[m;[37;25H[38;5;130mif[m (leaf)[38;25H{[39;33H[38;5;130mif[m(parent_node->left->val == value)[40;33H{[41;41Hparent_node->left = [31mNULL[m;[42;33H}[43;33H[38;5;130melse[m[44;33H{[45;41Hparent_node->right = [31mNULL[m;[46;33H}[47;33Hfree(current_node);[48;25H}[49;25H[38;5;130melse[m [38;5;130mif[m (only_one_child)[50;25H{[51;33H[34m/*Right node of the parent*/[m[52;33H[38;5;130mif[m (parent_node->right->val == current_node->val )[53;33H{[54;41H[34m/*Right node of the current_node*/[m[55;41H[38;5;130mif[m (current_node->right != [31mNULL[m)[56;41H{[57;49Hparent_node->right = current_node->right;[58;41H}[59;41H[34m/*Left node of the current node*/[m[60;41H[38;5;130melse[m[61;41H{[62;49Hparent_node->right = current_node->left;[63;41H}[64;49Hfree(current_node);[65;33H}[66;33H[34m/*Left node of the parent*/[m[67;261H[K[67;261H105,1[9C70%[6;1H[?25h[?25l[67;251H^D[6;1H[67;251H  [6;33H[1;66r[1;1H[33M[1;67r[34;33H[38;5;130melse[m[35;33H{[36;41H[34m/*Right node of the current*/[m[37;41H[38;5;130mif[m (current_node->right != [31mNULL[m)[38;41H{[39;49Hparent_node->left = current_node->right;[40;41H}[41;41H[34m/*Left node of the current*/[m[42;41H[38;5;130melse[m[43;41H{[44;49Hparent_node->left = current_node->left;[45;41H}[46;41Hfree(current_node);[47;33H}[48;25H}[49;25H[38;5;130melse[m [38;5;130mif[m (two_childrens)[50;25H{[51;33Htmp = current_node;[52;33Hparent_node = current_node;[53;33Htmp = current_node->right;[54;33H[38;5;130mwhile[m (tmp->left != [31mNULL[m)[55;33H{[56;49Htmp = tmp->left;[57;33H}[58;33Htmp->right = parent_node->right->right;[59;33Hparent_node->right = tmp;[60;33Hfree(current_node);[61;25H}[62;25H[38;5;130mbreak[m;[63;17H}[64;17H[38;5;130melse[m[65;17H{[66;25H[38;5;130mreturn[m ([31mfalse[m);[67;261H[K[67;261H138,5-33      94%[6;33H[?25h[?25l[67;251H^D[6;33H[67;251H  [31;49H[1;66r[1;1H[8M[1;67r[59;17H}[60;9H}[61;9H[38;5;130mif[m (!current_node)[62;9H{[63;17H[38;5;130mreturn[m ([31mfalse[m);[64;9H}[65;9H[38;5;130mreturn[m ([31mtrue[m);
}[67;261H[K[67;261H171,7-49      Bot[31;49H[?25h[?25l[67;251H^D[31;49H[67;251H  [64;9H[62;9H[106m{[64;9H}[m[67;261H204,2-9 [64;9H[?25h[?25l[67;251H^D[64;9H[67;251H  [66;1H[62;9H{[64;9H}[67;263H6,1  [66;1H[?25h
[?2004l[>4;m[?1004l[?2004l[?1l>[?2004h[>4;2m[?25h[>4;m[?1049l[23;0;0tVim: Error reading input, exiting...
Vim: preserving files...
Vim: Finished.
[67;1H[23;2t[23;1t[J5 files to edit
